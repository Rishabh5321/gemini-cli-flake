name: update-dev-package
on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2

      # Generate a GitHub App token for creating the PR
      - name: Generate App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}

      # Configure Git for FlakeBuilderApp
      - name: Configure Git for FlakeBuilderApp
        run: |
          git config --global user.email "flakebuilderapp[bot]@users.noreply.github.com"
          git config --global user.name "flakebuilderapp[bot]"
          echo "Git user configured: $(git config --global user.name) <$(git config --global user.email)>"

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000
            substituters = https://rishabh5321.cachix.org https://cache.nixos.org
            trusted-public-keys = rishabh5321.cachix.org-1:mxfBIH2XElE6ieFXXYBA9Ame4mVTbAf1TGR843siggk= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ1TGR843siggk=

      - name: Install Dependencies
        run: |
          nix profile install nixpkgs#gh
          gh --version

      - name: Check for new release
        id: check_release
        run: |
          CURRENT_VERSION=$(grep -oP 'version = "\K[0-9.]+-dev\.[0-9]+' dev/package.nix)
          LATEST_RELEASE=$(gh release view --json tagName --jq .tagName -R google-gemini/gemini-cli | sed 's/^v//')
          echo "Current version: $CURRENT_VERSION"
          echo "Latest release: $LATEST_RELEASE"
          if [ "$(printf '%s\n' "$CURRENT_VERSION" "$LATEST_RELEASE" | sort -V | head -n 1)" = "$CURRENT_VERSION" ] && [ "$CURRENT_VERSION" != "$LATEST_RELEASE" ]; then
            echo "NEW_RELEASE_AVAILABLE=true" >> $GITHUB_OUTPUT
          else
            echo "No new release available or current version is newer."
          fi

      - name: Update dev package
        id: update_dev_package
        if: steps.check_release.outputs.NEW_RELEASE_AVAILABLE == 'true'
        run: |
          nix profile install nixpkgs#nix-update
          nix-update --flake gemini-cli-dev || true # Allow failure if no update is needed

      - name: Check for changes
        id: git_status
        run: |
          git diff --exit-code || echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        if: steps.git_status.outputs.UPDATE_NEEDED == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token.outputs.token }}
          author: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          committer: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          labels: automated, dev-update
          delete-branch: true
          commit-message: "feat: Update gemini-cli-dev flake input"
          title: "feat: Automated update for gemini-cli-dev"
          body: |
            This PR automatically updates the `gemini-cli-dev` flake input to its latest version.

            Changes generated by GitHub Actions workflow.
          branch: "dev-update-${{ github.run_id }}"
          base: main

      - name: Set the PR to automerge
        if: ${{ steps.create_pr.outputs.pull-request-operation == 'created' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: "squash"
