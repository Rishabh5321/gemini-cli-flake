name: update-packages
on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-packages:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - name: stable
            path: pkgs/stable/package.nix
            version_regex: 'version = "\K[0-9.]+'
            jq_filter: 'select(.tagName | contains("nightly") | not)'
          - name: nightly
            path: pkgs/nightly/package.nix
            version_regex: 'version = "\K[0-9.]+-nightly\.[0-9]+\.[0-9a-f]+'
            jq_filter: 'select(.tagName | contains("nightly"))'

    steps:
      - uses: actions/checkout@v5

      - name: Generate App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Configure Git for FlakeBuilderApp
        run: |
          git config --global user.email "flakebuilderapp[bot]@users.noreply.github.com"
          git config --global user.name "flakebuilderapp[bot]"
          echo "Git user configured: $(git config --global user.name) <$(git config --global user.email)>"

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000

      - name: Update ${{ matrix.package.name }} package
        id: update_package
        env:
          GH_TOKEN: ${{ github.token }}
          PACKAGE_PATH: ${{ matrix.package.path }}
          VERSION_REGEX: ${{ matrix.package.version_regex }}
          JQ_FILTER: ${{ matrix.package.jq_filter }}
        run: |
          CURRENT_VERSION=$(grep -oP "$VERSION_REGEX" "$PACKAGE_PATH")
          echo "Current ${{ matrix.package.name }} version: $CURRENT_VERSION"

          LATEST_TAG=$(gh release list -R google-gemini/gemini-cli --limit 100 --json tagName | jq -r ".[] | ${JQ_FILTER} | .tagName" | head -n 1)

          if [ -z "$LATEST_TAG" ]; then
            echo "No new ${{ matrix.package.name }} release found."
            exit 0
          fi

          LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')

          echo "Latest ${{ matrix.package.name }} release tag: $LATEST_TAG"
          echo "Latest ${{ matrix.package.name }} version: $LATEST_VERSION"

          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New ${{ matrix.package.name }} release available. Updating..."
            DOWNLOAD_URL="https://github.com/google-gemini/gemini-cli/releases/download/${LATEST_TAG}/gemini.js"
            echo "Downloading from: $DOWNLOAD_URL"

            TEMP_FILE=$(mktemp)
            curl -L -o "$TEMP_FILE" "$DOWNLOAD_URL"
            NEW_HASH=$(nix hash file --sri "$TEMP_FILE")
            rm "$TEMP_FILE"

            echo "New version: $LATEST_VERSION"
            echo "New hash: $NEW_HASH"

            # Use awk to avoid issues with special characters in the hash
            awk -v new_version="$LATEST_VERSION" '
              /version *= */ {
                sub(/"[^"]*"/, "\"" new_version "\"");
              }
              { print }
            ' "$PACKAGE_PATH" > "${PACKAGE_PATH}.tmp" && mv "${PACKAGE_PATH}.tmp" "$PACKAGE_PATH"

            awk -v new_hash="$NEW_HASH" '
              /hash *= */ {
                sub(/"[^"]*"/, "\"" new_hash "\"");
              }
              { print }
            ' "$PACKAGE_PATH" > "${PACKAGE_PATH}.tmp" && mv "${PACKAGE_PATH}.tmp" "$PACKAGE_PATH"

            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
          else
            echo "No new ${{ matrix.package.name }} release available or current version is newer."
          fi

      - name: Check for changes
        id: git_status
        if: steps.update_package.outputs.UPDATE_NEEDED == 'true'
        run: |
          git diff --quiet && exit 0 || echo "CHANGES_EXIST=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        if: steps.git_status.outputs.CHANGES_EXIST == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token.outputs.token }}
          author: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          committer: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          labels: automated, ${{ matrix.package.name }}-update
          delete-branch: true
          commit-message: "feat: Update gemini-cli-${{ matrix.package.name }} flake input"
          title: "feat: Automated update for gemini-cli-${{ matrix.package.name }}"
          body: |
            This PR automatically updates the `gemini-cli-${{ matrix.package.name }}` flake input to its latest version.

            Changes generated by GitHub Actions workflow.
          branch: "${{ matrix.package.name }}-update"
          base: main

      - name: Set the PR to automerge
        if: ${{ steps.create_pr.outputs.pull-request-operation == 'created' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: "squash"
