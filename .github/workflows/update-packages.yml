name: update-packages
on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [stable, nightly]
    steps:
      - uses: actions/checkout@v4.2.2

      # Generate a GitHub App token for creating the PR
      - name: Generate App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}

      # Configure Git for FlakeBuilderApp
      - name: Configure Git for FlakeBuilderApp
        run: |
          git config --global user.email "flakebuilderapp[bot]@users.noreply.github.com"
          git config --global user.name "flakebuilderapp[bot]"
          echo "Git user configured: $(git config --global user.name) <$(git config --global user.email)>"

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            max-jobs = auto
            download-buffer-size = 500000000
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Update ${{ matrix.package }} package
        id: update_package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          PACKAGE_TYPE=${{ matrix.package }}
          PACKAGE_FILE="pkgs/$PACKAGE_TYPE/package.nix"
          echo "Checking for updates for $PACKAGE_TYPE package..."

          if [ "$PACKAGE_TYPE" = "nightly" ]; then
            LATEST_TAG=$(gh release list -R google-gemini/gemini-cli --limit 100 --json tagName | jq -r '.[] | select(.tagName | test("nightly")) | .tagName' | head -n 1)
            if [ -z "$LATEST_TAG" ]; then
              echo "No release found for $PACKAGE_TYPE."
              exit 0
            fi
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' "$PACKAGE_FILE")
            echo "Current version: $CURRENT_VERSION"
            echo "Latest version: $LATEST_VERSION"

            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "New version available. Updating..."
              echo "UPDATE_NEEDED=true" >> "$GITHUB_OUTPUT"
              DOWNLOAD_URL="https://github.com/google-gemini/gemini-cli/releases/download/${LATEST_TAG}/gemini.js"
              echo "Downloading from: $DOWNLOAD_URL"
              TEMP_FILE=$(mktemp)
              curl -L -o "$TEMP_FILE" "$DOWNLOAD_URL"
              NEW_HASH=$(nix hash file --sri "$TEMP_FILE")
              rm "$TEMP_FILE"
              echo "New hash: $NEW_HASH"
              sed -i -E "s/version = \".*\"/version = \"$LATEST_VERSION\"/" "$PACKAGE_FILE"
              sed -i -E "s|hash = \".*\"|hash = \"$NEW_HASH\"|" "$PACKAGE_FILE"
            else
              echo "Package is up to date."
              echo "UPDATE_NEEDED=false" >> "$GITHUB_OUTPUT"
            fi
          elif [ "$PACKAGE_TYPE" = "stable" ]; then
            nix-env -iA nixpkgs.nix-prefetch-github
            LATEST_TAG=$(gh release list -R google-gemini/gemini-cli --limit 100 --json tagName | jq -r '[.[] | select(.tagName | test("nightly") | not)] | .[0].tagName')
            if [ -z "$LATEST_TAG" ]; then
              echo "No release found for $PACKAGE_TYPE."
              exit 0
            fi
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' "$PACKAGE_FILE")
            echo "Current version: $CURRENT_VERSION"
            echo "Latest version: $LATEST_VERSION"

            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "New version available. Updating..."
              echo "UPDATE_NEEDED=true" >> "$GITHUB_OUTPUT"
              SRC_HASH=$(nix-prefetch-github --rev "$LATEST_TAG" google-gemini gemini-cli | jq -r .hash)
              echo "New src hash: $SRC_HASH"
              sed -i -E "s/version = \".*\"/version = \"$LATEST_VERSION\"/" "$PACKAGE_FILE"
              sed -i "/src = pkgs.fetchFromGitHub/,/npmDeps = pkgs.fetchNpmDeps/ s|hash = \".*\"|hash = \"$SRC_HASH\"|" "$PACKAGE_FILE"
              sed -i "/npmDeps = pkgs.fetchNpmDeps/,\$ s|hash = \".*\"|hash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"/|" "$PACKAGE_FILE"
              echo "Building to get npmDeps hash..."
              BUILD_LOG=$(mktemp)
              if ! nix-build .#packages.x86_64-linux.gemini-cli > "$BUILD_LOG" 2>&1; then
                echo "Build failed as expected. Extracting hash."
                NPM_DEPS_HASH=$(grep 'got:' "$BUILD_LOG" | head -n 1 | sed -e 's/.*got: *//' -e 's/"//g')
                if [ -z "$NPM_DEPS_HASH" ]; then
                  echo "Could not extract npmDeps hash from build log."
                  cat "$BUILD_LOG"
                  exit 1
                fi
                echo "New npmDeps hash: $NPM_DEPS_HASH"
                sed -i "/npmDeps = pkgs.fetchNpmDeps/,\$ s|hash = \".*\"|hash = \"$NPM_DEPS_HASH\"|" "$PACKAGE_FILE"
              else
                echo "Build succeeded unexpectedly. Check the package definition."
                exit 1
              fi
            else
              echo "Package is up to date."
              echo "UPDATE_NEEDED=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Check for changes
        id: git_status
        if: steps.update_package.outputs.UPDATE_NEEDED == 'true'
        run: |
          git diff --exit-code || echo "CHANGES_EXIST=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create_pr
        if: steps.git_status.outputs.CHANGES_EXIST == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token.outputs.token }}
          author: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          committer: "flakebuilderapp[bot] <flakebuilderapp[bot]@users.noreply.github.com>"
          labels: automated, ${{ matrix.package }}-update
          delete-branch: true
          commit-message: "feat: Update gemini-cli-${{ matrix.package }} to latest version"
          title: "feat: Automated update for gemini-cli-${{ matrix.package }}"
          body: |
            This PR automatically updates the `gemini-cli-${{ matrix.package }}` package to its latest version.
            Changes generated by GitHub Actions workflow.
          branch: "${{ matrix.package }}-update"
          base: main

      - name: Set the PR to automerge
        if: steps.create_pr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: "squash"